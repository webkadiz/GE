{"version":3,"sources":["webpack:///src/js/components/tools/common-tools.vue","webpack:///./src/js/components/tools/common-tools.vue?76e5","webpack:///./src/js/components/tools/common-tools.vue?aafc","webpack:///./src/js/components/tools/common-tools.vue?9dfa","webpack:///./src/js/components/tools/common-tools.vue","webpack:///./src/js/components/tools/common-tools.vue?9391","webpack:///./src/js/components/tools/common-tools.vue?bd91"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;;;;8IAGA;iJAEA;AAHA;AAIA;aACA;+BACA;AACA;QACA;sCACA;AACA;oBAEA;YACA;6CAEA;;;uBAEA;iBACA;mBACA;iBAEA;AALA;6BAMA;aACA;yBACA;OAEA;8DACA;yDACA;AAEA;;6BACA;aACA;yBACA;OAEA;AACA;;iBAEA;0BACA;uBACA;AAEA;;gBACA;uCACA;2DACA;AAEA;;0CACA;mCACA;uBACA;AACA;AACA;uBACA;;UAEA;;oEACA;eACA;oBACA;;cAEA;cACA;iBACA;mCACA;oBAEA;AANA;AAOA;gBACA;wDACA;iFACA;+CACA;yDACA;AACA;sBACA;UAEA;;+EACA;oDACA;yCACA;uCACA;sBACA;AACA;AAEA;;;qBAIA;;AAHA;oBAIA;mBACA;iBACA;oBACA;AACA;uBACA;sBAEA;;yBACA;8BAEA;;8CAEA;;qCACA;6BACA;;6BAEA;uBACA;sBACA;8BAEA;AALA;AAOA;;aAEA;;AACA;8BACA;yBAEA;;qCACA;6BACA;AAEA;;8CAEA;;aACA;AACA;yBACA;AACA;;;;;;;;sBAEA;;6BAEA;;wBACA;yCACA;+CACA;kCACA;kDAEA;;uFAEA;;wFACA;kBACA;uBAEA;;sBACA;;uBAEA;qBACA;yBACA;2BACA;gBACA;kBACA;uBACA;AAGA;AAVA;;mBAWA;AAEA;;8BAEA;;mCACA;sBACA;AAEA;;AACA;0CACA;;sBAEA;;;yBAEA;0BAGA;AAJA;;mBAKA;AACA;4CACA;gCAEA;;wBACA;sBACA;AACA;AAEA;;wBAEA;;kCAEA;;;2BAEA;4BAGA;AAJA;;qBAKA;AACA;AACA;wCACA;yBAEA;;mCACA;iCACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;+BACA;+BACA;6BACA;AACA;wBACA;AACA;;;;;;;;sBAEA;;6BACA;AAEA;;wBACA;yCAEA;;sBACA;;uBAEA;qBACA;6DACA;gBACA;kBACA;uBACA;kBAGA;AATA;;mBAUA;AAEA;;8BAEA;;mCACA;sBACA;AAEA;;AACA;0CACA;;sBAEA;;;yBAEA;0BAGA;AAJA;;mBAMA;;AACA;4CACA;gCAEA;;wBACA;sBACA;AACA;AAEA;;wBAEA;;kCAEA;;;2BAEA;4BAGA;AAJA;;qBAKA;AACA;AACA;wCACA;yBAEA;;mCACA;iCACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;+BACA;+BACA;6BACA;AACA;uBACA;;;;;;;;sBAEA;;0CACA;yBACA;wBACA;oBAEA;;;yBAEA;oBACA;kBAGA;AALA;;iBAMA;mCACA;AACA;AACA;iCACA;8BACA;sBAEA;;mBACA;;yBAEA;oBACA;kBAEA;AAJA;AAMA;;sBAEA;;sCAEA;;;uBAEA;kBACA;gBAGA;AALA;;mBAMA;oBAEA;;4CACA;sBACA;gCACA;wBAEA;;+CACA;+CAEA;;;yBAEA;oBACA;kBAGA;AALA;;qBAMA;AACA;wCACA;mCACA;iCACA;8CACA;kCACA;0BAEA;;mCACA;mCAEA;;;2BAEA;sBACA;oBAGA;AALA;;uBAMA;AACA;AACA;AAEA;;AAEA;;+BACA;AACA;uBACA;;;;sBAEA;;sCACA;8BAEA;;uBAEA;;;gBAEA;eAGA;AAJA;;sDAKA;kCAEA;;uCAEA;;qBACA;mBACA;aACA;AAEA;;AAEA;;qBACA;6BACA;AACA;0BACA;UACA;sBACA;AACA;sCACA;8CACA;;;;;;cACA;mCACA,6CACA,yDAEA;;oEACA;6FACA;kCACA;mDACA;uDACA;iDACA,QACA,8EAGA;;4CACA;qBACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;6BACA;AACA;yBACA;AACA;;;;;;;;sBAEA;;6BAEA;;wBACA;yCAEA;;sBACA;;AAEA;AACA;yDACA;gBACA;kBAGA;AAPA;;mBAQA;AAEA;;8BAEA;;mCACA;sBACA;AAEA;;AACA;0CACA;;sBAEA;;;gBAEA;kBACA;oCAGA;AALA;;oBAOA;;6CACA;AACA;4CACA;gCAEA;;wBACA;sBACA;AACA;AAEA;;wCAEA;;kCAEA;;;kBAEA;oBACA;sCAGA;AALA;;+CAOA;;AACA;AACA;wCACA;mCACA;iCACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;;+BACA;+BACA;6BACA;AACA;yBACA;AACA;;;;;;sBACA;AACA;0CACA;yCAEA;;;AAEA;AAGA;AAJA;;mBAMA;;4CACA;gCACA;mCACA;oCAEA;;mCACA;2BACA;2BACA;+BACA;2BACA;0BACA;8BACA;2BACA;0BACA;iBACA;0BACA;0BACA;AAEA;;4BAEA;;4DAEA;;iBACA;AAGA;;wCACA;yBAEA;;mCACA;iCACA;AAEA;AAEA;;AAEA;;+BACA;AACA;uBACA;AACA;;;;;;sBACA;AACA;0CACA;8BAEA;;;uBAEA;kBAGA;AAJA;;mBAMA;;4CACA;6BAEA;;gCAEA;;iBACA;AAEA;;wCACA;yBAEA;;mCACA;iCACA;AACA;AAEA;;AAEA;;+BACA;AACA;yBACA;UACA;sBAEA;;aACA,GACA,sBACA;mFACA;AAGA;;AAEA;;6BACA;AACA;0BACA;UACA;sBAEA;;aACA,GACA,sBACA;mFACA;AAGA;;AAEA;;6BACA;AAEA;AAnlBA;aAolBA;SACA;;aAEA,CACA,QACA,UACA,SACA,QACA,QACA,WACA,UACA,UACA,QACA,UAEA;iBAEA;AAfA;AAgBA;AA5oBA,E;;;;;;;;;;;AChBA;AACA;;;AAGA;AACA,4DAA6D,mBAAmB,kBAAkB,kCAAkC,kBAAkB,oBAAoB,4BAA4B,8BAA8B,gBAAgB,4BAA4B,GAAG,0BAA0B,gBAAgB,iBAAiB,kBAAkB,wBAAwB,4BAA4B,oBAAoB,GAAG,8BAA8B,kBAAkB,mBAAmB,GAAG,iCAAiC,gCAAgC,GAAG,gCAAgC,uBAAuB,GAAG,sCAAsC,kBAAkB,mBAAmB,yBAAyB,iBAAiB,eAAe,oBAAoB,+BAA+B,GAAG,0CAA0C,oBAAoB,qBAAqB,GAAG;;AAE/3B;;;;;;;;;;;;;;;ACPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,qCAAqC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kCAAkC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,uBAAuB,SAAS,aAAa,EAAE;AAC/C;AACA;AACA,OAAO;AACP;AACA,iBAAiB,iCAAiC;AAClD,qBAAqB,4BAA4B,eAAe,EAAE;AAClE;AACA,qBAAqB,4BAA4B,eAAe,EAAE;AAClE;AACA;AACA;AACA,WAAW,uCAAuC,uBAAuB,EAAE;AAC3E,uBAAuB,SAAS,qBAAqB,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,Y;;;;;;;;;;;;;;;;;;ACVkC;AAClC;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,uBAiBA;AACA;AACA,gF;;;;;;;;;;;;;;;;ACvCuL,iPAAoB,C;;;;;;;;;;;;;;;;ACA0L,yZAAoB,C","file":"js/8.build.js","sourcesContent":["<template>\n\t<div class=\"tools-wrapper tools\">    \n    <div  :class=\"[{active: activeTool === tool} , 'tool','bg-anim-icon' ]\"  \n          @click=\"active(tool)\" :key=\"index\" v-for=\"(tool, index) in tools\">\n      <Icon :icon=\"tool\"></Icon>\n    </div>\n    <div class=\"tool swap-color\">\n      <input type=\"text\" ref=\"foreground\">\n      <input type=\"text\" ref=\"background\">\n      <div @click=\"swapColor\" class=\"swap-color__icon\"><Icon icon=\"swap-color\"></Icon></div>\n    </div>\n\t</div>\t\n</template>\n\n<script>\nexport default {\n  components: {\n    Casing: () => import(\"../casing.vue\"),\n    Icon  : () => import(\"../icon.vue\")\n  },\n  computed: {\n    canvas() {\n      return this.$store.state.canvas;\n    },\n    c() {\n      return this.$store.state.canvas.c;\n    },\n    ...Vuex.mapState(['activeTool'])\n  },\n  mounted() {\n    bus.$on(\"toolEventActive\", this.active); // из app.js canvasActive\n\n    let spectrum = {\n      preferredFormat: \"name\",\n      showInput      : true,\n      showButtons    : false,\n      showAlpha      : true\n    };\n    $(this.$refs.foreground).spectrum({\n      color            : \"black\",\n      replacerClassName: \"common-tools__foreground-replacer common-tools__colorpicker-replacer\",\n      ...spectrum\n    });\n    $(this.$refs.foreground).on('dragstop.spectrum', color => {\n      this.updateColor($(this.$refs.foreground).spectrum('get'));\n    })\n\n    $(this.$refs.background).spectrum({\n      color            : \"white\",\n      replacerClassName: \"common-tools__background-replacer common-tools__colorpicker-replacer\",\n      ...spectrum\n    });\n  },\n  methods: {\n    active(tool) {\n      if (this.generator) {\n        this.generator.next();\n      }\n\n      if (tool) {\n        this.$store.state.activeTool = tool;\n        this.updateColor($(this.$refs.foreground).spectrum(\"get\"));\n      }\n\n      if (this.canvas && this.activeTool) {\n        this.generator = this[this.activeTool]();\n        this.generator.next();\n      }\n    },\n    updateColor(color) {\n      let tool = this.activeTool, mode;\n\n      if (tool === \"pencil\" || tool === \"brush\" || tool === \"line\") {\n                                                                                                                                                                                mode      = \"stroke\";\n                                                                                                                                                                              } else mode = \"fill\";\n      this.$store.commit({\n        type      : \"propUpdate\",\n        tool      : \"global\",\n        setting   : mode,\n        newValue  : tinycolor(color).toRgbString(),\n        onlyGlobal: true\n      });\n    },\n    swapColor() {\n      let tempColor = $(this.$refs.foreground).spectrum(\"get\");\n      $(this.$refs.foreground).spectrum(\"set\", $(this.$refs.background).spectrum(\"get\"));\n      $(this.$refs.background).spectrum(\"set\", tempColor);\n      this.updateColor($(this.$refs.foreground).spectrum(\"get\"));\n    },\n    add(object, type) {\n      let group;\n\n      if(this.canvas.activeLayer && this.canvas.activeLayer.type === 'empty') {\n        this.canvas.activeLayer.group.addWithUpdate(object)\n        this.canvas.activeLayer.object = object\n        this.canvas.activeLayer.type   = type\n        this.c.remove(object)\n        return;\n      }\n\n      group = new fabric.Group([object], {\n        hasControls: false,\n\n      })\n      group.layer = true;\n      group.type  = type\n      this.c.add(group)\n      this.c.remove(object)\n    },\n    move: function*() {\n      let self = this.canvas;\n\n      self.c.selection      = true;\n      self.c.skipTargetFind = false;\n\n      self.c.setActiveObject(self.activeLayer.group);\n\n      self.c.forEachObject(object => {\n        object.hasControls = true\n        object.set({\n          cornerStrokeColor : 'white',\n          cornerStyle       : 'circle',\n          cornerSize        : 5,\n          transparentCorners: false\n        })\n      })\n\n      self.c.requestRenderAll();\n\n      yield;\n      self.c.skipTargetFind = true;\n      self.c.selection      = false;\n\n      self.c.forEachObject(object => {\n        object.hasControls = false\n      })\n\n      self.c.setActiveObject(self.activeLayer.group)\n\n      self.c.requestRenderAll();\n    },\n    pencil: function*() {\n      //prettier-ignore\n      let down, move, moveCursor, up, path, group, cursor, self = this.canvas;\n\n      self.c.defaultCursor = \"none\";\n\n      moveCursor = e => {\n        let { x: left, y: top } = self.c.getPointer();\n        let { x, y }            = self.c.getPointer(null, true);\n        let width, height, color, imageData;\n        width = height = this.$store.state.pencil.strokeWidth;\n\n        imageData = self.c.getContext().getImageData(x + width / 2, y + height / 2, 1, 1);\n\n        if (imageData.data[0] < 50 && imageData.data[1] < 50 && imageData.data[2] < 50) {\n                                                                                                                                                                                  color      = \"white\";\n                                                                                                                                                                                } else color = \"black\";\n\n        self.c.remove(cursor);\n        cursor = new fabric.Rect({\n          left       : left - 1,\n          top        : top - 1,\n          width      : width + 1,\n          height     : height + 1,\n          fill       : \"transparent\",\n          stroke     : color,\n          strokeWidth: 1\n          //shadow: 'rgba(0,0,0,.3) 0 0 3px'\n        });\n\n        self.c.add(cursor);\n      };\n\n      self.c.on(\"mouse:move\", moveCursor);\n\n      self.c.on(\"mouse:out\", () => {\n        self.c.remove(cursor);\n      });\n\n      //prettier-ignore\n      self.c.on('mouse:down', down = e => {\n        let {x, y} = self.c.getPointer(), counter = 0;\n\n        path = new fabric.Path(`M ${x} ${y} L ${x + 0.1} ${y}`, Object.assign({}, this.$store.state.global , this.$store.state.pencil, {\n          strokeLineCap : 'square',\n          strokeLineJoin: 'bevil'\n        }));\t\n\n        self.c.add(path);\n        moveCursor()      \n        self.c.on('mouse:move', move = e => {\n          let {x, y} = self.c.getPointer();\n          \n          if(!counter) {\n            path.path.pop();\n            counter++;\n          }\n          \n          self.c.remove(path);\n\n          path.path.push(['L', x , y])\n      \n          path = new fabric.Path(path.path, Object.assign({}, this.$store.state.global, this.$store.state.pencil, {\n            strokeLineCap : 'square',\n            strokeLineJoin: 'bevil',\n          }))\n\n          self.c.add(path);         \n          moveCursor();\n        })\t\n        self.c.on('mouse:up', up = e => {\n          this.add(path, 'pencil')\n\n          self.c.off('mouse:move', move)\n          self.c.off('mouse:up', up);\n          moveCursor()\n        })\n      })\n\n      //console.log(\"before yield\");\n      yield;\n      //console.log(\"after yield\");\n\n      self.c.off(\"mouse:down\", down);\n      self.c.off(\"mouse:move\", moveCursor);\n      self.c.defaultCursor = \"default\";\n    },\n    brush: function*() {\n      //prettier-ignore\n      let down, move, moveCursor, up, path, group, cursor, self = this.canvas;\n\n      self.c.defaultCursor = \"none\";\n      //#567cc9\n\n      moveCursor = e => {\n        let { x: left, y: top } = self.c.getPointer();\n\n        self.c.remove(cursor);\n        cursor = new fabric.Circle({\n          left       : left - 1,\n          top        : top - 1,\n          radius     : this.$store.state.pencil.strokeWidth / 2 + 0.5,\n          fill       : \"transparent\",\n          stroke     : \"black\",\n          strokeWidth: 1,\n          shadow     : 'rgba(255,255,255,1) 0 0 1px'\n        });\n\n        self.c.add(cursor);\n      };\n\n      self.c.on(\"mouse:move\", moveCursor);\n\n      self.c.on(\"mouse:out\", () => {\n        self.c.remove(cursor);\n      });\n\n      //prettier-ignore\n      self.c.on('mouse:down', down = e => {\n        let {x, y} = self.c.getPointer(), counter = 0;\n\n        path = new fabric.Path(`M ${x} ${y} L ${x + 0.1} ${y}`, Object.assign({}, this.$store.state.global, this.$store.state.pencil, {\n          strokeLineCap : 'round',\n          strokeLineJoin: 'round'\n        }));\t\n\n        self.c.add(path);\n\n        moveCursor()     \n        self.c.on('mouse:move', move = e => {\n          let {x, y} = self.c.getPointer();\n          \n          if(!counter) {\n            path.path.pop();\n            counter++;\n          }\n          \n          self.c.remove(path);\n\n          path.path.push(['L', x , y])\n      \n          path = new fabric.Path(path.path, Object.assign({}, this.$store.state.global, this.$store.state.pencil, {\n            strokeLineCap : 'round',\n            strokeLineJoin: 'round'\n          }))\n\n          self.c.add(path);          \n          moveCursor();\n        })\t\n        self.c.on('mouse:up', up = e => {\n          this.add(path, 'brush')\n\n          self.c.off('mouse:move', move)\n          self.c.off('mouse:up', up);\n          moveCursor()\n        })\n      })\n\n      //console.log(\"before yield\");\n      yield;\n      //console.log(\"after yield\");\n\n      self.c.off(\"mouse:down\", down);\n      self.c.off(\"mouse:move\", moveCursor);\n      self.c.defaultCursor = \"default\";\n    },\n    path: function*(){\n      let path, reX, reY, down, move, up, group, self = this.canvas;\n\n      self.c.on('mouse:down', down = e => {\n        if(e.e.ctrlKey) {\n          self.c.remove(path);\n          path.path.pop();\n\n          self.c.add(new fabric.Path(path.path, {\n          strokeWidth: 20,\n          stroke     : 'black',\n          fill       : 'transparent'\n          }))\n          \n          path = undefined;\n          self.c.off(\"mouse:move\", move);\n          return\n        }\n        self.c.off(\"mouse:move\", move);\n        let { x, y } = self.c.getPointer();\n            reX      = x; reY = y;\n        \n        if(!path) {\n          path = new fabric.Path(`M ${x} ${y}`, {\n            strokeWidth: 20,\n            stroke     : 'black',\n            fill       : 'transparent'\n          })\n        }\n\n        self.c.remove(path);\n\n        path.path.push([\"Q\", x, y, x, y])\n        \n        path = new fabric.Path(path.path, {\n          strokeWidth: 20,\n          stroke     : 'black',\n          fill       : 'transparent'\n        })\n     \n        self.c.add(path)\n        console.log(path);\n        \n        self.c.on('mouse:move', move = e => {\n          console.log('move');\n          let { x, y } = self.c.getPointer();\n          self.c.remove(path);\n\n          path.path[path.path.length - 2][1] = x\n          path.path[path.path.length - 2][2] = y\n          \n          path = new fabric.Path(path.path, {\n            strokeWidth: 20,\n            stroke     : 'black',\n            fill       : 'transparent'\n          })\n\n          self.c.add(path)\n        })\n        self.c.on('mouse:up', up = e => {\n          self.c.off(\"mouse:move\", move);\n          self.c.off(\"mouse:up\", up);\n          self.c.on('mouse:move', move = e => {\n            let { x, y } = self.c.getPointer();\n            self.c.remove(path);\n\n            _.last(path.path)[3] = x;\n            _.last(path.path)[4] = y;\n            \n            path = new fabric.Path(path.path, {\n              strokeWidth: 20,\n              stroke     : 'black',\n              fill       : 'transparent'\n            })\n        \n            self.c.add(path)\n          })\n        })\n      })\n\n      yield;\n\n      self.c.off(\"mouse:down\", down);\n    },\n    text: function*() {\n      let text, up, group, self = this.canvas;\n\n      self.c.on(\"mouse:up\",up = e => {\n        let { x, y } = self.c.getPointer();\n\n        if (text) text.exitEditing();\n\n        Object.assign(this.$store.state.text, {\n          left: x,\n          top : y\n        });\n\n        text  = new fabric.IText(\"\", this.$store.state.text);\n        group = new fabric.Group([text])\n\n        text.on('changed', () => group.addWithUpdate());\n\n        group.type = 'text'\n        self.c.add(group);\n        text.enterEditing();\n      })\n\n      yield;\n\n      if (text) text.exitEditing();\n      self.c.off(\"mouse:up\", up);\n    },\n    pouring: function*() {\n      let up,\n        self = this.canvas;\n      //prettier-ignore\n      self.c.on('mouse:up', up = e => {\n        if(e.button === 1 || e.button === 3) {\n          let {x, y}    = self.c.getPointer(), colorClick, colorFill, whereClick, fill, stroke;\n              colorFill = e.button === 1\n            ? $(this.$refs.foreground).spectrum('get').toRgbString()\n            :                                                                                     $(this.$refs.background).spectrum('get').toRgbString()\n  \n          for(let object of self.c.getObjects().slice().reverse()) {\n            if(object.containsPoint({x, y}) && !self.c.isTargetTransparent(object, x, y)) {\n              colorClick = self.c.getPixel();\n              fill       = tinycolor(object.object.fill).toRgb();\n              stroke     = tinycolor(object.object.stroke).toRgb();\n              whereClick = _.isEqual(colorClick, fill)\n                ? 'fill' \n                :                                                                                     _.isEqual(colorClick,stroke) ? 'stroke': fill.a === 0 ? 'stroke': 'fill'\n  \n              \n              object.object.set(whereClick, colorFill)\n              self.c.requestRenderAll()\n              break;\n            }\n          }\n        }\n      })\n\n      yield;\n\n      self.c.off(\"mouse:up\", up);\n    },\n    eraser: function*() {\n      //prettier-ignore\n      let down, move, moveCursor, up, path, group, cursor, self = this.canvas;\n\n      self.c.defaultCursor = \"none\";\n\n      moveCursor = e => {\n        let { x: left, y: top } = self.c.getPointer();\n\n        self.c.remove(cursor);\n        cursor = new fabric.Circle({\n          left,\n          top,\n          radius: this.$store.state.pencil.strokeWidth / 2,\n          fill  : \"transparent\",\n          stroke: \"grey\"\n        });\n\n        self.c.add(cursor);\n      };\n\n      self.c.on(\"mouse:move\", moveCursor);\n\n      self.c.on(\"mouse:out\", () => {\n        self.c.remove(cursor);\n      });\n\n      //prettier-ignore\n      self.c.on('mouse:down', down = e => {\n        let {x, y} = self.c.getPointer(), counter = 0;\n\n        path = new fabric.Path(`M ${x} ${y} L ${x + 0.1} ${y}`, Object.assign({}, this.$store.state.pencil, {\n          fill                    : 'transparent',\n          stroke                  : 'black',\n          globalCompositeOperation: 'destination-out'\n        }));\t\n\n        console.log(path);\n\n        self.activeLayer.group.addWithUpdate(path);\n        moveCursor()      \n        self.c.on('mouse:move', move = e => {\n          let {x, y} = self.c.getPointer();\n          \n          if(!counter) {\n            path.path.pop();\n            counter++;\n          }\n          \n          self.activeLayer.group.remove(path);\n\n          path.path.push(['L', x , y])\n      \n          path = new fabric.Path(path.path, Object.assign({}, this.$store.state.pencil, {\n            fill                    : 'transparent',\n            stroke                  : 'black',\n            globalCompositeOperation: 'destination-out'\n          }))\n\n          self.activeLayer.group.addWithUpdate(path);\n          \n          moveCursor();\n        })\t\n        self.c.on('mouse:up', up = e => {\n          self.c.off('mouse:move', move)\n          self.c.off('mouse:up', up);\n          moveCursor();\n        })\n      })\n\n      //console.log(\"before yield\");\n      yield;\n      //console.log(\"after yield\");\n\n      self.c.off(\"mouse:down\", down);\n      self.c.off(\"mouse:move\", moveCursor);\n      self.c.defaultCursor = \"default\";\n    },\n    square: function*() {\n      //prettier-ignore\n      let up, down, move, rect, group, self = this.canvas;\n      //prettier-ignore\n      self.c.on(\"mouse:down\", down = e => {\n        let { x: left, y: top } = self.c.getPointer();\n\n        rect = new fabric.Rect(Object.assign({}, this.$store.state.global, this.$store.state.square, {\n          left,\n          top\n        }));\n\n        self.c.add(rect)\n\n        self.c.on(\"mouse:move\", move = e => {\n          let { x, y } = self.c.getPointer(),\n              width    = Math.abs(x - left),\n              height   = Math.abs(y - top);\n\n          if (x < left && y < top) {\n            rect.scaleX = -1;\n            rect.scaleY = -1;\n          } else if (x < left) {\n            rect.scaleX = -1;\n            rect.scaleY = 1;\n          } else if (y < top) {\n            rect.scaleY = -1;\n            rect.scaleX = 1;\n          } else {\n            rect.scaleX = 1;\n            rect.scaleY = 1;\n          }\n\n          rect.set({ width, height });\n\n          console.log(rect.left, rect.top, rect.width, rect.height);\n\n          self.c.requestRenderAll();\n        })\n          \n\n        self.c.on(\"mouse:up\", up = e => {\n          this.add(rect, 'square')\n\n          self.c.off(\"mouse:move\", move);\n          self.c.off(\"mouse:up\", up);\n        })\n        \n      })\n\n      yield;\n\n      self.c.off(\"mouse:down\", down);\n    },\n    line: function*() {\n      //prettier-ignore\n      let down, move, up, line, group, self = this.canvas;\n      //prettier-ignore\n      self.c.on(\"mouse:down\", down = e => {\n        let { x, y } = self.c.getPointer();\n\n        line = new fabric.Line([x, y, x, y], Object.assign({}, this.$store.state.global, {\n          strokeWidth: 1,\n          stroke     : 'black'\n        }));\n\n        self.c.add(line)\n\n        self.c.on(\"mouse:move\", move = e => {\n          ({ x, y } = self.c.getPointer());\n\n          line.set({ x2: x, y2: y });\n\n          self.c.requestRenderAll();\n        })   \n\n        self.c.on(\"mouse:up\", up = e => {\n          this.add(line, 'lines')\n\n          self.c.off(\"mouse:move\", move);\n          self.c.off(\"mouse:up\", up);\n        });\n      })\n\n      yield;\n\n      self.c.off(\"mouse:down\", down);\n    },\n    zoomIn: function*() {\n      let up,\n        self = this.canvas;\n\n      self.c.on(\n        \"mouse:up\",\n        (up = e => {\n          this.$store.commit({ type: \"setZoom\", zoom: self.zoom + 0.2, point: self.c.getPointer() });\n        })\n      );\n\n      yield;\n\n      self.c.off(\"mouse:up\", up);\n    },\n    zoomOut: function*() {\n      let up,\n        self = this.canvas;\n\n      self.c.on(\n        \"mouse:up\",\n        (up = e => {\n          this.$store.commit({ type: \"setZoom\", zoom: self.zoom - 0.2, point: self.c.getPointer() });\n        })\n      );\n\n      yield;\n\n      self.c.off(\"mouse:up\", up);\n    }\n  },\n  updated() {},\n  data() {\n    return {\n      tools: [\n        'move',\n        'pencil',\n        'brush',\n        'path',\n        'text',\n        'pouring',\n        'eraser',\n        'square',\n        'line',\n        'zoomIn',\n        'zoomOut'\n      ],\n      generator: null\n    };\n  }\n};\n</script>\n\n<style lang=\"sass\" scoped>\n@import 'config-style'\n\n.tools-wrapper\n  flex-shrink    : 0\n  z-index        : 1000\n  background     : var(--main-color)\n  display        : flex\n  flex-wrap      : wrap\n  justify-content: center\n  align-content  : flex-start\n  width          : 40px\n  transition     : opacity .8s\n\n.tool\n  width          : 100%\n  height         : 40px\n  display        : flex\n  align-items    : center\n  justify-content: center\n  cursor         : pointer\n  svg\n    width : 19px\n    height: 19px\n.tool.active \n  background: var(--bg-color)\n\n.swap-color\n  position: relative\n  &__icon  \n    width    : 10px\n    height   : 10px\n    position : absolute\n    right    : 10%\n    top      : 10%\n    display  : flex\n    transform: rotate(90deg)\n    svg\n      width : 100%\n      height: 100%\n\n</style>\n","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.tools-wrapper[data-v-674b1a59] {\\n  flex-shrink: 0;\\n  z-index: 1000;\\n  background: var(--main-color);\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: center;\\n  align-content: flex-start;\\n  width: 40px;\\n  transition: opacity .8s;\\n}\\n.tool[data-v-674b1a59] {\\n  width: 100%;\\n  height: 40px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  cursor: pointer;\\n}\\n.tool svg[data-v-674b1a59] {\\n    width: 19px;\\n    height: 19px;\\n}\\n.tool.active[data-v-674b1a59] {\\n  background: var(--bg-color);\\n}\\n.swap-color[data-v-674b1a59] {\\n  position: relative;\\n}\\n.swap-color__icon[data-v-674b1a59] {\\n    width: 10px;\\n    height: 10px;\\n    position: absolute;\\n    right: 10%;\\n    top: 10%;\\n    display: flex;\\n    transform: rotate(90deg);\\n}\\n.swap-color__icon svg[data-v-674b1a59] {\\n      width: 100%;\\n      height: 100%;\\n}\\n\", \"\"]);\n\n// exports\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"tools-wrapper tools\" },\n    [\n      _vm._l(_vm.tools, function(tool, index) {\n        return _c(\n          \"div\",\n          {\n            key: index,\n            class: [\n              { active: _vm.activeTool === tool },\n              \"tool\",\n              \"bg-anim-icon\"\n            ],\n            on: {\n              click: function($event) {\n                _vm.active(tool)\n              }\n            }\n          },\n          [_c(\"Icon\", { attrs: { icon: tool } })],\n          1\n        )\n      }),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"tool swap-color\" }, [\n        _c(\"input\", { ref: \"foreground\", attrs: { type: \"text\" } }),\n        _vm._v(\" \"),\n        _c(\"input\", { ref: \"background\", attrs: { type: \"text\" } }),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"swap-color__icon\", on: { click: _vm.swapColor } },\n          [_c(\"Icon\", { attrs: { icon: \"swap-color\" } })],\n          1\n        )\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/sass-loader/lib/loader.js??ref--2-2!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"432683f4\", content, false, {});\n// Hot Module Replacement\nif(module.hot) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/sass-loader/lib/loader.js??ref--2-2!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\", function() {\n     var newContent = require(\"!!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/sass-loader/lib/loader.js??ref--2-2!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\");\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}","import { render, staticRenderFns } from \"./common-tools.vue?vue&type=template&id=674b1a59&scoped=true\"\nimport script from \"./common-tools.vue?vue&type=script&lang=js\"\nexport * from \"./common-tools.vue?vue&type=script&lang=js\"\nimport style0 from \"./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"674b1a59\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/webkadiz/Projects/current/GE/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!module.hot.data) {\n      api.createRecord('674b1a59', component.options)\n    } else {\n      api.reload('674b1a59', component.options)\n    }\n    module.hot.accept(\"./common-tools.vue?vue&type=template&id=674b1a59&scoped=true\", function () {\n      api.rerender('674b1a59', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/js/components/tools/common-tools.vue\"\nexport default component.exports","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=script&lang=js\"","import mod from \"-!../../../../node_modules/vue-style-loader/index.js!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/sass-loader/lib/loader.js??ref--2-2!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\"; export default mod; export * from \"-!../../../../node_modules/vue-style-loader/index.js!../../../../node_modules/css-loader/index.js!../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../node_modules/sass-loader/lib/loader.js??ref--2-2!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./common-tools.vue?vue&type=style&index=0&id=674b1a59&lang=sass&scoped=true\""],"sourceRoot":""}